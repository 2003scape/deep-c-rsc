diff -ru ./java/lang/Class.java ../patched_for_TraceJni/java/lang/Class.java
--- ./java/lang/Class.java	2008-05-30 21:40:52.000000000 +0400
+++ ../patched_for_TraceJni/java/lang/Class.java	2009-03-26 11:20:56.000000000 +0300
@@ -381,6 +381,7 @@
 
     public Constructor<T> getConstructor(Class<?>... argumentTypes)
         throws NoSuchMethodException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getConstructor(false, this, argumentTypes);
         checkMemberAccess(Member.PUBLIC);
         Constructor<T> ctors[] = getReflectionData().getPublicConstructors(); 
         for (int i = 0; i < ctors.length; i++) {
@@ -397,6 +398,7 @@
 
     @SuppressWarnings("unchecked")
     public Constructor[] getConstructors() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getConstructors(false, this);
         checkMemberAccess(Member.PUBLIC);
         return Reflection.copyConstructors(getReflectionData().getPublicConstructors());
     }
@@ -410,6 +412,7 @@
     @SuppressWarnings("unchecked")
     public Constructor<T> getDeclaredConstructor(Class... argumentTypes)
         throws NoSuchMethodException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getConstructor(true, this, argumentTypes);
         checkMemberAccess(Member.DECLARED);
         return Reflection
             .copyConstructor(getDeclaredConstructorInternal(argumentTypes));
@@ -417,11 +420,13 @@
 
     @SuppressWarnings("unchecked")
     public Constructor[] getDeclaredConstructors() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getConstructors(true, this);
         checkMemberAccess(Member.DECLARED);
         return Reflection.copyConstructors(getReflectionData().getDeclaredConstructors());
     }
 
     public Field getDeclaredField(String fieldName) throws NoSuchFieldException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getField(true, this, fieldName);
         checkMemberAccess(Member.DECLARED);
         final Field[] declaredFields = getReflectionData().getDeclaredFields();
         for (int i = 0; i < declaredFields.length; i++) {
@@ -434,6 +439,7 @@
     }
 
     public Field[] getDeclaredFields() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getFields(true, this);
         checkMemberAccess(Member.DECLARED);
         return Reflection.copyFields(getReflectionData().getDeclaredFields());
     }
@@ -441,6 +447,7 @@
     @SuppressWarnings("unchecked")
     public Method getDeclaredMethod(String methodName, Class... argumentTypes)
         throws NoSuchMethodException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getMethod(true, this, methodName, argumentTypes);
         checkMemberAccess(Member.DECLARED);
         return Reflection
             .copyMethod(findMatchingMethod(getReflectionData().getDeclaredMethods(),
@@ -448,6 +455,7 @@
     }
 
     public Method[] getDeclaredMethods() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getMethods(true, this);
         checkMemberAccess(Member.DECLARED);
         return Reflection.copyMethods(getReflectionData().getDeclaredMethods());
     }
@@ -457,6 +465,7 @@
     }
 
     public Field getField(String fieldName) throws NoSuchFieldException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getField(false, this, fieldName);
         checkMemberAccess(Member.PUBLIC);
         final Field[] fields = getReflectionData().getPublicFields();
         for (Field f : fields) {
@@ -468,6 +477,7 @@
     }
 
     public Field[] getFields() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getFields(false, this);
         checkMemberAccess(Member.PUBLIC);
         return Reflection.copyFields(getReflectionData().getPublicFields());
     }
@@ -480,6 +490,7 @@
     @SuppressWarnings("unchecked")
     public Method getMethod(String methodName, Class... argumentTypes)
         throws NoSuchMethodException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getMethod(false, this, methodName, argumentTypes);
         checkMemberAccess(Member.PUBLIC);
         return Reflection
             .copyMethod(findMatchingMethod(getReflectionData().getPublicMethods(),
@@ -487,6 +498,7 @@
     }
 
     public Method[] getMethods() {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_getMethods(false, this);
         checkMemberAccess(Member.PUBLIC);
         return Reflection.copyMethods(getReflectionData().getPublicMethods());
     }
@@ -587,6 +599,7 @@
 
     public T newInstance() throws InstantiationException,
             IllegalAccessException {
+com.ivmaisoft.jcgorefl.TraceJni.intercept_newInstance(this);
         T newInstance = null;
         final ReflectionData localReflectionData = getReflectionData();
         SecurityManager sc = System.getSecurityManager();
