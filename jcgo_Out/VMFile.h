/* DO NOT EDIT THIS FILE - it is machine generated (JCGO_116) */

#ifdef JCGO_116

#ifndef NOJAVA_java_io_VMFile_getenv0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getenv0)(
 JNIEnv *pJniEnv, jclass This, jstring name );
#endif
JCGO_NOSEP_INLINE java_lang_String CFASTCALL
java_io_VMFile__getenv0__Ls( java_lang_String name );

#ifndef NOJAVA_java_io_VMFile_getLineSeparator0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getLineSeparator0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_INLINE java_lang_String CFASTCALL
java_io_VMFile__getLineSeparator0__( void );

#ifndef NOJAVA_java_io_VMFile_isUniRootFileSys0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_isUniRootFileSys0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_FRWINL jint CFASTCALL
java_io_VMFile__isUniRootFileSys0__( void );

#ifndef NOJAVA_java_io_VMFile_normPlatformPath0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_normPlatformPath0)(
 JNIEnv *pJniEnv, jclass This, jstring path );
#endif
JCGO_NOSEP_INLINE java_lang_String CFASTCALL
java_io_VMFile__normPlatformPath0__Ls( java_lang_String path );

#ifndef NOJAVA_java_io_VMFile_getDosUnixDrivePrefix0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getDosUnixDrivePrefix0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_FRWINL java_lang_String CFASTCALL
java_io_VMFile__getDosUnixDrivePrefix0__( void );

#ifndef NOJAVA_java_io_VMFile_getVolumeCurDir0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getVolumeCurDir0)(
 JNIEnv *pJniEnv, jclass This, jstring path );
#endif
JCGO_NOSEP_INLINE java_lang_String CFASTCALL
java_io_VMFile__getVolumeCurDir0__Ls( java_lang_String path );

JCGO_NOSEP_INLINE java_lang_String CFASTCALL
java_io_VMFile__getDriveCurDir__IZ( jint drive, jboolean useCache
 );

#ifndef NOJAVA_java_io_VMFile_isCaseSensitive0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_isCaseSensitive0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_FRWINL jint CFASTCALL
java_io_VMFile__isCaseSensitive0__( void );

#ifndef NOJAVA_java_io_VMFile_dirDataSizeAndIsFind0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_dirDataSizeAndIsFind0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_FRWINL jint CFASTCALL
java_io_VMFile__dirDataSizeAndIsFind0__( void );

#ifndef NOJAVA_java_io_VMFile_dirOpNeedsSync0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_dirOpNeedsSync0)(
 JNIEnv *pJniEnv, jclass This );
#endif
JCGO_NOSEP_FRWINL jint CFASTCALL
java_io_VMFile__dirOpNeedsSync0__( void );

#ifndef NOJAVA_java_io_VMFile_access0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_access0)(
 JNIEnv *pJniEnv, jclass This, jstring path, jint chkRead, jint chkWrite,
 jint chkExec );
#endif
JCGO_NOSEP_INLINE jint CFASTCALL
java_io_VMFile__access0__LsIII( java_lang_String path, jint chkRead,
 jint chkWrite, jint chkExec );

#ifndef NOJAVA_java_io_VMFile_isRegFileOrDir0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_isRegFileOrDir0)(
 JNIEnv *pJniEnv, jclass This, jstring path );
#endif
JCGO_NOSEP_INLINE jint CFASTCALL
java_io_VMFile__isRegFileOrDir0__Ls( java_lang_String path );

#ifndef NOJAVA_java_io_VMFile_pathListPlatformSep0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_pathListPlatformSep0)(
 JNIEnv *pJniEnv, jclass This, jstring pathlist );
#endif
JCGO_NOSEP_INLINE jint CFASTCALL
java_io_VMFile__pathListPlatformSep0__Ls( java_lang_String pathlist
 );

JCGO_NOSEP_INLINE jchar CFASTCALL
java_io_VMFile__pathListPlatformSep__Ls( java_lang_String pathlist
 );

#ifndef NOJAVA_java_io_VMFile_currentTime0
JNIIMPORT jlong JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_currentTime0)(
 JNIEnv *pJniEnv, jclass This, jint isNano );
#endif
JCGO_NOSEP_INLINE jlong CFASTCALL
java_io_VMFile__currentTime0__I( jint isNano );

JCGO_NOSEP_INLINE jObjectArr CFASTCALL
java_io_VMFile__list__Ls( java_lang_String path );

JCGO_NOSEP_STATIC jboolean CFASTCALL
java_io_VMFile__isDirectory__Ls( java_lang_String path );

JCGO_NOSEP_FRWINL jlong CFASTCALL
java_io_VMFile__currentTime__Z( jboolean isNano );

JCGO_NOSEP_FRWINL java_lang_String CFASTCALL
java_io_VMFile__getFileSeparator__( void );

JCGO_NOSEP_FRWINL java_lang_String CFASTCALL
java_io_VMFile__getPathSeparator__( void );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__pathParentOf__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__makeAbsPath__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__collapsePathDots__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__canonPathCase__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__normPlatformPath__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__normPlatformListOfPaths__Ls( java_lang_String pathlist
 );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__normVolumeColon__Ls( java_lang_String path );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__getenvPlatform__Ls( java_lang_String name );

JCGO_NOSEP_FRWINL java_lang_String CFASTCALL
java_io_VMFile__getLineSeparator__( void );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__pathAppendName__LsLs( java_lang_String path, java_lang_String
 name );

JCGO_NOSEP_STATIC jObjectArr CFASTCALL
java_io_VMFile__listInner__LsBA( java_lang_String path, jbyteArr dirdata
 );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__canonPathCaseMatch__LsBA( java_lang_String curPath,
 jbyteArr dirdata );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__canonPathCaseFind__LsBALs( java_lang_String curPath,
 jbyteArr dirdata, java_lang_String name );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__canonPathCaseScan__LsBAJA( java_lang_String curPath,
 jbyteArr dirdata, jlongArr devInodeArr );

JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__pathPrefixLength__Ls( java_lang_String path );

JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__driveIndexOf__C( jchar ch );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__drivePathPrefix__I( jint drive );

JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__getCurDir__( void );

#ifndef NOJAVA_java_io_VMFile_getFilePathSepChar0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getFilePathSepChar0)(
 JNIEnv *pJniEnv, jclass This, jint isPath );
#endif
JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__getFilePathSepChar0__I( jint isPath );

#ifndef NOJAVA_java_io_VMFile_isIOErrorNoEntity0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_isIOErrorNoEntity0)(
 JNIEnv *pJniEnv, jclass This, jint res );
#endif
JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__isIOErrorNoEntity0__I( jint res );

#ifndef NOJAVA_java_io_VMFile_realPath0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_realPath0)(
 JNIEnv *pJniEnv, jclass This, jstring path, jintArray resArr );
#endif
JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__realPath0__LsIA( java_lang_String path, jintArr resArr
 );

#ifndef NOJAVA_java_io_VMFile_getDriveCurDir0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getDriveCurDir0)(
 JNIEnv *pJniEnv, jclass This, jint drive );
#endif
JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__getDriveCurDir0__I( jint drive );

#ifndef NOJAVA_java_io_VMFile_getLnkDevInode0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_getLnkDevInode0)(
 JNIEnv *pJniEnv, jclass This, jstring path, jlongArray devInodeArr
 );
#endif
JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__getLnkDevInode0__LsJA( java_lang_String path, jlongArr
 devInodeArr );

#ifndef NOJAVA_java_io_VMFile_dirOpenReadFirst0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_dirOpenReadFirst0)(
 JNIEnv *pJniEnv, jclass This, jbyteArray dirdata, jstring path );
#endif
JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__dirOpenReadFirst0__BALs( jbyteArr dirdata, java_lang_String
 path );

#ifndef NOJAVA_java_io_VMFile_dirReadNext0
JNIIMPORT jstring JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_dirReadNext0)(
 JNIEnv *pJniEnv, jclass This, jbyteArray dirdata );
#endif
JCGO_NOSEP_STATIC java_lang_String CFASTCALL
java_io_VMFile__dirReadNext0__BA( jbyteArr dirdata );

#ifndef NOJAVA_java_io_VMFile_dirClose0
JNIIMPORT jint JNICALL JCGO_JNI_FUNC(Java_java_io_VMFile_dirClose0)(
 JNIEnv *pJniEnv, jclass This, jbyteArray dirdata );
#endif
JCGO_NOSEP_STATIC jint CFASTCALL
java_io_VMFile__dirClose0__BA( jbyteArr dirdata );

#define JCGO_NATCLASS_java_io_VMFile

struct java_io_VMFile_methods_s
{
 java_lang_Class jcgo_class;
 JCGO_GCJDESCR_DEFN
 JCGO_TYPEID_T jcgo_typeid;
 JCGO_OBJSIZE_T jcgo_objsize;
 CONST struct jcgo_reflect_s *jcgo_reflect;
 JCGO_CLINIT_DEFN
 java_io_VMFile (CFASTCALL *jcgo_thisRtn)( java_io_VMFile This );
 jboolean (CFASTCALL *equals__Lo)( java_lang_Object This, java_lang_Object
  obj );
 jint (CFASTCALL *hashCode__)( java_lang_Object This );
 java_lang_String (CFASTCALL *toString__)( java_lang_Object This );
 void (CFASTCALL *finalize__)( java_lang_Object This );
};

struct java_io_VMFile_class_s
{
 struct java_lang_Class_s jcgo_class;
};

JCGO_SEP_EXTERN CONST struct jcgo_methods_s java_io_VMFile_methods;
JCGO_SEP_EXTERN struct java_io_VMFile_class_s java_io_VMFile__class;

JCGO_NOSEP_STATIC void CFASTCALL
java_io_VMFile__class__0( void );

JCGO_SEP_GCEXTERN java_lang_Object java_io_VMFile__DIR_OP_LOCK;
JCGO_SEP_GCEXTERN jObjectArr java_io_VMFile__driveDirCache;
JCGO_SEP_GCEXTERN java_lang_String java_io_VMFile__DOS_UNIX_DRIVE_PREFIX;
JCGO_SEP_EXTERN jint java_io_VMFile__DIR_DATASIZE_ISFIND;
JCGO_SEP_EXTERN jint java_io_VMFile__defaultDrive;
JCGO_SEP_EXTERN jchar java_io_VMFile__FILE_SEP;
JCGO_SEP_EXTERN jchar java_io_VMFile__PATH_SEP;
JCGO_SEP_EXTERN jboolean java_io_VMFile__IS_CASE_SENSITIVE;
JCGO_SEP_EXTERN jboolean java_io_VMFile__IS_UNIX_FS;

struct java_io_VMFile_s
{
 CONST struct java_io_VMFile_methods_s *JCGO_IMMFLD_CONST jcgo_methods;
 JCGO_MON_DEFN
};

JCGO_SEP_EXTERN CONST jcgo_arrtype63_GmCnnctn jcgo_array3_VMFile;

JCGO_SEP_EXTERN CONST jcgo_arrtype640_Mdclnt jcgo_array4_VMFile;

JCGO_SEP_EXTERN JCGO_NOTHR_CONST struct java_lang_String_s jcgo_string1_VMFile;

JCGO_SEP_EXTERN JCGO_NOTHR_CONST struct java_lang_String_s jcgo_string2_VMFile;

#endif
